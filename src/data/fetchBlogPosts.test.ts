// Test generated by Testify

import { fetchAllBlogPosts, getBlogPost } from './fetchBlogPosts';

describe('fetchBlogPosts', () => {
  describe('fetchAllBlogPosts', () => {
    it('should fetch blog posts successfully', async () => {
      const pageNumber = 1;
      const amount = 10;
      const response = await fetchAllBlogPosts(pageNumber, amount);
      expect(response).not.toBe('Fail to fetch blog post');
      expect(response).toBeInstanceOf(Array);
    });

    it('should handle error when fetching blog posts', async () => {
      jest.spyOn(global, 'fetch').mockRejectedValue(new Error('Network error'));
      const pageNumber = 1;
      const amount = 10;
      const response = await fetchAllBlogPosts(pageNumber, amount);
      expect(response).toBe('Network error');
      jest.restoreAllMocks();
    });

    it('should handle invalid page number', async () => {
      const pageNumber = -1;
      const amount = 10;
      const response = await fetchAllBlogPosts(pageNumber, amount);
      expect(response).not.toBe('Fail to fetch blog post');
      expect(response).toBeInstanceOf(Array);
    });

    it('should handle invalid amount', async () => {
      const pageNumber = 1;
      const amount = -1;
      const response = await fetchAllBlogPosts(pageNumber, amount);
      expect(response).not.toBe('Fail to fetch blog post');
      expect(response).toBeInstanceOf(Array);
    });
  });

  describe('getBlogPost', () => {
    it('should fetch a blog post successfully', async () => {
      const slug = 'test-slug';
      const response = await getBlogPost(slug);
      expect(response).not.toBeInstanceOf(Error);
      expect(response).toBeInstanceOf(Object);
    });

    it('should handle error when fetching a blog post', async () => {
      jest.spyOn(global, 'fetch').mockRejectedValue(new Error('Network error'));
      const slug = 'test-slug';
      const response = await getBlogPost(slug);
      expect(response).toBe('Network error');
      jest.restoreAllMocks();
    });

    it('should handle invalid slug', async () => {
      const slug = '';
      const response = await getBlogPost(slug);
      expect(response).not.toBeInstanceOf(Error);
      expect(response).toBeInstanceOf(Object);
    });
  });
});